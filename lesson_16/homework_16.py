"""1. Создайте генератор, который возвращает только строки из списка:
["Python", 123, "Java", 456, "C++", 789]
Выведите все строки в одну строку через пробел.
Ожидаемый вывод:
Python Java C++"""


lst_1 = ["Python", 123, "Java", 456, "C++", 789]
def gen(lst_1):
    for i in lst_1:
        if type(i) == str:
            yield i

result = ' '.join(gen(lst_1))
print(result)

print(8*"=")
"""2. Создайте генератор случайных чисел от 1 до 100 (10 чисел),
используя модуль random (попробуйте сами найти как использовать), и найдите максимальное число.
Ожидаемый вывод:
Максимальное число: 98  # (значение может отличаться)"""
import random
nums = []
gen_2 = (random.randint(1, 100) for x in range(10))
for x in gen_2:
    nums.append(x)

print(f"Максимальное число: {max(nums)}")

print(8*"=")
"""3. Создайте генератор, который возвращает слова из файла words.txt,
но только те, которые длиннее 5 символов.
Пример содержимого файла (words.txt):
apple banana cat elephant python
Ожидаемый вывод:
banana elephant python"""

file = "words.txt"


def gen_3():
    with open(file, encoding="utf-8") as f:
        x = f.read()
        words = x.split()
        for word in words:
            if len(word) > 5:
                yield word

result = ' '.join(gen_3())
print(result)

print(8*"=")
"""4. Напишите функцию-генератор, которая перебирает строки файла text.txt,
возвращая только те, которые содержат слово "Python".
Пример содержимого text.txt:
Hello world
Python is great
I love coding in Python
Java is also good
Ожидаемый вывод:
Python is great
I love coding in Python"""

file = "text.txt"

def gen_4():
    try:
        f = open(file, encoding="utf-8")
        for stroka in f:
            if "Python" in stroka:
                yield stroka
    finally:
        f.close()

result = "".join(gen_4())
print(result)

print(8*"=")
"""5. Создайте бесконечный генератор, который возвращает случайные числа от 1 до 100.
Остановите выполнение, как только сгенерируется число 50.
Ожидаемый вывод (значения могут отличаться):
23 89 17 50"""
import random
def gen_5():
    while True:
        x = random.randint(1, 100)
        yield x
        if x == 50:
            return

a = gen_5()
for x in a:
    print(x, end=" ")


print("\n")
print(8*"=")
"""6. Создайте функцию-генератор, которая возвращает первые N простых чисел.
Выведите первые 10 простых чисел.
Ожидаемый вывод:
2 3 5 7 11 13 17 19 23 29"""

def prostoe(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def gen_6(N):
    count = 0
    num = 2
    while count < N:
        if prostoe(num):
            yield num
            count += 1
        num += 1

for i in gen_6(10):
    print(i, end=" ")


print("\n")
print(8*"=")
"""7. Создайте функцию-генератор, которая имитирует загрузку данных из API.
Генератор должен возвращать строки "Получены данные 1", "Получены данные 2", …
Остановите генерацию после 5 вызовов next().
Ожидаемый вывод:
Получены данные 1
Получены данные 2
Получены данные 3
Получены данные 4
Получены данные 5"""

def gen_7():
    x = 1
    while True:
        yield f"Получены данные {x}"
        x += 1

out = gen_7()

for i in range(1, 6):
    print(next(out))


print("\n")
print(8*"=")

"""8. Используйте map() вместе с лямбда-функцией, чтобы для каждого числа из пользовательского ввода
(числа, разделённые пробелами) вычислить его квадрат.
Результатом должно быть преобразование входной строки в список квадратов."""


# nums_8 = input("Введите два числа через пробел: ")
# nums_8_1 = nums_8.split()
# kvadrat = list(map(lambda i: int(i)**2, nums_8_1))
# print(kvadrat)
#
# print("\n")
# print(8*"=")
"""9. Напишите программу, которая с помощью map() и метода строк upper преобразует список названий городов к верхнему регистру.
Например, преобразуйте список ["Москва", "Санкт-Петербург", "Казань"] в ["МОСКВА", "САНКТ-ПЕТЕРБУРГ", "КАЗАНЬ"]."""

cities = ["Москва", "Санкт-Петербург", "Казань"]
upper_cities = map(lambda x: x.upper(), cities)
print(list(upper_cities))

print("\n")
print(8*"=")

"""10. Используя filter(), оставьте в списке только те числа, которые делятся на 3 и на 5 одновременно.
Дан список: [15, 30, 45, 22, 60, 77, 90, 100]."""

lst_10 = [15, 30, 45, 22, 60, 77, 90, 100]
nums_10 = filter(lambda x: x % 3 == 0 and x % 5 == 0, lst_10)
print(list(nums_10))

print("\n")
print(8*"=")

"""11. Используя filter(), получите из списка только строки, содержащие хотя бы одну цифру.
Дан список: ["hello", "world42", "python3", "abc", "123", "data1science"]."""

lst_11 = ["hello", "world42", "python3", "abc", "123", "data1science"]

def is_digit(string):
    for x in string:
        if x.isdigit():
            return True
    return False

result_11 = filter(is_digit, lst_11)
print(list(result_11))
print(8*"=")
"""12. Используйте zip() и dict(), чтобы создать словарь, в котором:
Ключи – это названия стран
Значения – их столицы
Исходные списки:
countries = ["Россия", "Франция", "Германия"]
capitals = ["Москва", "Париж", "Берлин"]
Результат должен быть таким:
{"Россия": "Москва", "Франция": "Париж", "Германия": "Берлин"}
Подсказка: zip объект можно сразу преобразовать в словарь, если в zip преобразовали 2 итерируемых объекта."""

countries = ["Россия", "Франция", "Германия"]
capitals = ["Москва", "Париж", "Берлин"]

result = dict(zip(countries,capitals))
print(result)
print(8*"=")
"""13. Используйте zip(*iterable), чтобы выполнить обратное преобразование списка кортежей:
data = [(1, 'a'), (2, 'b'), (3, 'c')]
Распакуйте его в два отдельных списка:
[1, 2, 3]
['a', 'b', 'c']"""
data = [(1, 'a'), (2, 'b'), (3, 'c')]
data1, data2 = map(list, zip(*data))
print(data1)
print(data2)

print(8*"=")
"""14. Дан список имен names. Отсортируйте его так, чтобы сначала шли имена с заглавной буквы, а затем – с маленькой.
names = ["петр", "Иван", "мария", "Анна"]
Ожидаемый результат:
["Анна", "Иван", "мария", "петр"]

Подсказка: вспомните как найти id буквы чтобы понять какая больше заглавная или строчная =)"""
names = ["петр", "Иван", "мария", "Анна"]
names.sort(key= lambda x: x[0])
print(names)

print(8*"=")
"""15. Дан список кортежей products, где первый элемент – название товара, второй – цена.
 Отсортируйте его по цене (по возрастанию).

products = [("Телефон", 500), ("Ноутбук", 1000), ("Планшет", 700)]
Ожидаемый результат:

[("Телефон", 500), ("Планшет", 700), ("Ноутбук", 1000)]"""

products = [("Телефон", 500), ("Ноутбук", 1000), ("Планшет", 700)]

products.sort(key= lambda x: x[1])
print(products)